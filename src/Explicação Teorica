      CONCEITUAÇÃO METODOS:
        "É uma porção de código (sub-rotina) que é disponibilizada por uma classe. Este é executado quando é feita uma requisição a ele. São responsáveis por definir e realizar um determinado comportamento."

          OBS: Todo método ele deve ser criado dentro de uma classe.

          CRIAÇÃO:

              V: "public", "protected" ou "private"
              T: concreto ou abstrato
              M: "static" ou "final"
              R: tipo de dado ou "void"
              N: Nome que é fornecido ao método
              P: Parâmetros que pode receber
              E: exceções que pode lançar
              C: código que possui ou vazio

          Exemplos:

              Public String getNome(){...} //Este metodo vai retornar um texto
              Public double calcularTotalNota(){..}
              public int verificarDistancia(int cordenada1, int cordenada2){...} // exemplo de como passar parametros
              public abstract void executar(); //um metodo abstrato/corpo vazio
              public void alterarFabricante(Fabricante fabricante){...}
              public Relatorio gerarDadosAnaliticos(Cliente cliente, Lis<Compra> compra){...}

              public static R N(P) {...}

          Utilização:

              Passa-se uma mensagem através de uma classe ou objeto.

              nome_da_classe.nome_do_metodo(); ou nome_da_classe_nome_do_metodo(...);
              nome_do_objeto.nome_do_metodo(); ou nome_do_objeto_nome_do_metodo(...);

              Math.random(); ou Math.sqrt(4);

              Math.random() = gera numero aleatorio, não tem parâmetro
              Math.sqrt() = ele pega a raiz quadrada do numero dentro do paranteses/parametro

              usuario.getEmail(); ou usuario.alterarEndereco(endereco);

              Por padrão as classes sempre tem a primeira letra em maiusculo e os objetos em minusculo

          Particularidades:

            Assinatura: é a forma de identificar unicamente o método
                ass = nome + parâmetros

                Método: public double calcularTotalVenda(double precoItem1, double precoItem2, double precoItem3) {...}

                Assinatura: calcularTotalVenda(double precoItem1, double precoItem2, doubleprecoItem3)

            Construtor e Destrutor: são métodos especiais usados na Orientação a Objetos.

            Mensagem: é o ato de solicitar ao método que o mesmo execute. Esta pode ser direcionada a um objeto ou a uma classe.

            Passagem de parâmetros: por valor (cópia) / por referência (endereço)

            exemplo:

                int i = 10;
                public void fazerAlgo(int i) {

                    i = i + 10;
                    System.out.println("Valor de i dentro: " + i);
                }
                System.out.println("Valor de i fora: " + i;);

                //Tudo que eu faço dentro não reflete fora, dentro estara mostrando 20 e fora volta a ser 10.

            Boas práticas

                Nomes devem ser descritivos, mas curtos
                Notação camelo: verificarSaldo(); executarTransferencia(...); existeDebito();
                Deve possuir entre 80 e 120 linhas
                Evite lista de parâmetros longas
                Visibilidades adequadas

SOBRECARGA:

        Conceituação: "É a capacidade de definir métodos para diferentes contextos, mas preservando seu nome. "

        Criação:

            Alterar a assinatura do método:
                Ass = nome + parâmetros

                    converterParaInteiro(float f);
                    converterParaInteiro(double d);
                    converterParaInteiro(String s);
                    converterParaInteiro(float f, RoundType rd);
                    converterParaInteiro(double d, RoundType rd);
                    converterParaInteiro(String s, RoundType rd);

                    converterParaInteiro(RoundType rd, String s);
                    converterParaInteiro();

TIPOS DE ESTRUTURAS DE REPETIÇÃO:

        Estruturas condicionais: if-else, switch-case
        Estruturas de repetição: for, while, do-while
        Estruturas de exceções: try-catch-finally, throw

        Estruturas condicionais:
            A Estrutura Condicional possibilita a escolha de um grupo de ações e comportamentos a serem executadas quando determinadas condições são ou não satisfeitas. A Estrutura Condicional pode ser Simples ou Composta.

        Condicional Simples:
            Ocorre quando uma validação de execução de fluxo somente quando a condição for positiva, consideramos como uma estrutura Simples, exemplo:

                inicio > sacar > contém saldo? > (se sim) Atualiza saldo || (se não) fim
                
        Condicionais encadeadas:
        	Em um controle de fluxo condicional, nem sempre nos limitamos ao se (if) e senão (else), poderemos ter uma terceira, quarta e ou inúmeras condições
        	
        Condição ternária:
        	Como vimos em operadores, podemos abreviar nosso algorítmico condicional refatorando com o conceito de operador ternário. Vamos refatorar os exememplos acima para ilustrar o poder deste recurso:
        	
        Switch Case:
        	A estrutura switch compara o valor de cada caso com o da variável sequencialmente, e sempre que encontra um valor correspondente, executa o código associado ao caso. Para evitar que as comparações continuem a ser executadas após um caso correspondente ter sido encontrado, acrescentamos o comando break no final de cada bloco de códigos. O comando break, quando executado, encerra a execução da estrutura onde ele se encontra.
        
ESTRUTURAS DE REPETIÇÃO:

		Laços de repetição:
			Laços de repetição, também conhecidos como laços de iteração ou simplesmente loops, são comandos que permitem iteração de código, ou seja, que comandos presentes no bloco sejam repetidos diversas vezes.
			
			For (para)
			While (enquanto)
			Do While (Faça enquanto)
			
		For:
			O comando for permite que uma variável contadora seja testada e incrementada a cada iteração, sendo essas informações definidas na chamada do comando. O comando for recebe como entrada uma variável contadora, a condição e o valor de incrementarão.
			
			A estrutura de sintaxe do controle de repetição for é exibida abaixo:
			
				for (bloco de inicializaçõa; expressão booleana de validação; bloco de atualização)
				{
					//Comando que será executado ate que a
					//expressão de validação torne-se falsa
				}
				
			Também usamos o controle de fluxo for para interagir sobre arrays e coleções
			
			For Each:
				O uso do for / each está fortemente relacionada com um cenário onde contenha um array ou coleção, e assim, a interação é baseada aos elementos da coleção.
		
		Break e continue:
			Break significa quebrar, parar, frear, interromper. E é isso que se faz quando o Java encontra esse comando pela frente. Continue, como o nome diz ele 'continua' o laço. O comando break interrompe o laço, já o continue interrompe somente a iteração atual.
		
		While:
			O laço while (enquanto) determina que enquanto uma condição for válida, o bloco de código será executado. o laço while testa a condição antes de executar o código, logo, caso a condição seja inválida no primeiro teste o bloco nem será executado.			

		Do While:
			O laço do / while (faça enquanto), assim como o laço while, considera que enquanto uma determinada condição for válida o bloco de código sera executado. Entretando, do/while testa a condição após executar o código, sendo assim, mesmo que a condição seja considerada inválida no primeiro teste o bloco será executado pelo menos uma vez. 
			
ESTRUTURAS EXCEPCIONAIS:
		
		Exceções:
			Ao executar o código Java, diferentes erros podem acontecer: erros de codificação feitos pelo programador, erros devido a entrada errada ou outros imprevistos.
			
			Quando ocorre um erro, o Java normalmente para e gera uma mensagem de erro. O termo técnico para isso é: Java lançará uma exceção (jogará um erro).
			
			De forma interpretativa em Java, um erro é algo irreparável, a aplicação trava ou é encerrada drasticamente. Já exceções é um fluxo inesperado da nossa aplicação, exemplo:
			Querer dividir um valor por zero, querer abrir um arquivo que não existe, abrir uma conexão de banco com usuário ou senha inválida. Todos estes cenários e os demais não são erros mas sim fluxos não previstos pela aplicação.
		
			É ai que entra mais uma responsabilidade do desenvolvedor, prever situações iguais a estas e realizar o que denominamos de Tratamento de Exceções.
			
		Conhecendo algumas exceções já mapeadas
			
			A linguagem Java dispõe de uma vasta lista de classes que representam exceções, abaixo iremos apresentar as mais comuns:
			
				java.lang.NullPointerException : Quando tentamos obter algumas informações de uma variável nula.
				java.lang.ArithmeticException : Quando tentamos dividir um valor por zero.
				java.sql.SQLException : Quando existe algum erro relacionado a interação com banco de dados.
				java.io.FileNotFoundException : Quando tentamos ler ou escrever em um arquivo que não existe.
				
		Tratamento de exceções:
			
			E quando inevitavelmente ocorrer uma exceção? Como nós desenvolvedores podemos ajustar o nosso algoritmo para amenizar o ocorrido?
			
			A instrução try permite que você defina um bloco de código para ser testado quanto a erros enquanto está sendo executado.
			
			A instrução catch permite definir um bloco de código a ser executado ocorra um erro no bloco try
			
			A instrução finally permite definir um bloco de código a ser executado independente de ocorrer um erro ou não. As palavras try e catch vêm em pares:
			
		Try/Catch:	
		
			Estrutura do codigo try catch
				
				try {
					//Bloco de código conforme esperado
				}
				catch(Exception e){//Precisamos saber qual exceção
					//Bloco de código que captura as exceções que podem acontecer em caso de fluxo não previsto
				 }
				 
		Hierarquia das exceções:
			
			A linguagem Java dispõe de uma variedade de classes que representam exceções, e estas classes são organizadas em uma hierarquia denominadas Checked and Unchecked Exceptions ou Exceções Checadas e Não Checadas.
			
			O que determina uma exceção ser classificada como checada ou não checada ? 
				É o risco dela ser disparada logo você precisa tratá-la.
			
			
			Exceções customizadas:
				Nós podemos criar nossas próprias exceções baseadas em regras de négocio e assim melhor direcionar quem for utilizar os recursos desenvolvidos no projeto, exemplo:
				
					°Imagina que como regra de negócio, para formatar um cep necessita sempre de ter 8 dígitos, caso contrário lançará uma exceção que denominamos de CepInvalidoException.
					°Primeiro criamos nossa exceção
					¹ - public class CepInvalidoException extends Exception {}
					°Em seguida criamos nosso método de formatação de cep.

COLLECTION

			°Collection é um objeto que agrupa múltiplos elementos (variáveis primitivas ou objetos) dentro de uma única unidade.
			°Serve para	armazenar e processar conjuntos de dados de forma eficiente.	
			°Antes do Java 2 (JDK 1.2), a implementação de coleções na linguagem Java incluía poucas classes e não tinha a organização de um framework.		
		
		Composição Collection:
			
			Interfaces: é um contrato que quando assumido por uma classe deve ser implementado.
			Implementações ou classes: são as materializações, a codificação das interfaces.
			Algoritmos: É uma sequência lógica, finita e definida de instruções que devem ser seguidas para resolver um problema.
		
		Listas:
		
			java.util.List
			° Elementos duplicados e garante ordem de inserção	
			
				A implementação vector é pensada quando vai se falar de threads.
				A implementação ArrayList só implementa a interface List.	
				A implementação LinkedList implementa tanto a interface Queue quanto a List.
						(OBS: "ArrayList deve ser usado onde mais operações de pesquisa são necessárias, e LinkedList deve ser usado onde mais operações de inserção e exclusão são necessárias.")
					
			 
